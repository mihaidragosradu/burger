{"version":3,"sources":["logo.svg","Person/Person.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","person","props","className","onClick","click","name","age","children","type","onChange","changed","value","App","state","persons","switchNameHandler","newName","setState","nameChangedHandler","event","target","style","backgroundColor","color","fontSize","border","padding","cursor","this","bind","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iJAAAA,EAAOC,QAAU,IAA0B,kC,sKCc5BC,G,qBAXA,SAACC,GAEZ,OACI,yBAAKC,UAAU,UACX,uBAAGC,QAASF,EAAMG,OAAlB,OAA8BH,EAAMI,KAApC,aAAoDJ,EAAMK,IAA1D,cACA,2BAAIL,EAAMM,UACV,2BAAOC,KAAK,OAAOC,SAAUR,EAAMS,QAASC,MAAOV,EAAMI,UC+DtDO,G,mNAhEbC,MAAQ,CACJC,QAAS,CACP,CAACT,KAAM,SAAUC,IAAI,IACrB,CAACD,KAAM,OAAQC,IAAI,IACnB,CAACD,KAAM,QAASC,IAAI,K,EAG1BS,kBAAoB,SAACC,GACpB,EAAKC,SAAS,CACZH,QAAS,CACR,CAACT,KAAMW,EAASV,IAAI,IACpB,CAACD,KAAM,MAAOC,IAAI,IAClB,CAACD,KAAM,OAAQC,IAAI,O,EAKvBY,mBAAqB,SAACC,GACpB,EAAKF,SAAS,CACZH,QAAS,CACR,CAACT,KAAM,MAAOC,IAAI,IAClB,CAACD,KAAMc,EAAMC,OAAOT,MAAOL,IAAI,IAC/B,CAACD,KAAM,OAAQC,IAAI,O,uDAOf,IAAD,OAUN,OAEE,yBAAKJ,UAAU,OAEb,4CAEA,4BACCmB,MAhBW,CACdC,gBAAiB,OACjBC,MAAM,QACNC,SAAU,OACVC,OAAQ,iBACRC,QAAS,OACTC,OAAQ,WAWNxB,QAAS,kBAAM,EAAKY,kBAAkB,WAFtC,eAIA,kBAAC,EAAD,CAAQV,KAAMuB,KAAKf,MAAMC,QAAQ,GAAGT,KAAMC,IAAKsB,KAAKf,MAAMC,QAAQ,GAAGR,MACrE,kBAAC,EAAD,CACMD,KAAMuB,KAAKf,MAAMC,QAAQ,GAAGT,KAC5BC,IAAKsB,KAAKf,MAAMC,QAAQ,GAAGR,IAC3BF,MAAOwB,KAAKb,kBAAkBc,KAAKD,KAAK,OACxClB,QAAWkB,KAAKV,oBAJtB,uBAMA,kBAAC,EAAD,CAAQb,KAAMuB,KAAKf,MAAMC,QAAQ,GAAGT,KAAMC,IAAKsB,KAAKf,MAAMC,QAAQ,GAAGR,W,GAzD3DwB,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.462ad8d2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport Person from './Person.css';\r\n\r\nconst person = (props) => {\r\n\r\n    return(\r\n        <div className=\"Person\">\r\n            <p onClick={props.click}>I'm {props.name} and I am {props.age} years old</p>\r\n            <p>{props.children}</p>\r\n            <input type=\"text\" onChange={props.changed} value={props.name}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default person;","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Person from './Person/Person.js';\n\nimport { render } from '@testing-library/react';\n\nclass App extends Component {\n  state = {\n      persons: [\n        {name: 'Dragos', age:33}, \n        {name: 'Radu', age:35}, \n        {name: 'Ioana', age:7}\n      ]\n  }\n  switchNameHandler = (newName)=> {\n   this.setState({\n     persons: [\n      {name: newName, age:33}, \n      {name: 'Ion', age:35}, \n      {name: 'Vasi', age:7}\n     ]\n   })\n  }\n\n  nameChangedHandler = (event) => {\n    this.setState({\n      persons: [\n       {name: 'Max', age:33}, \n       {name: event.target.value, age:35}, \n       {name: 'Vasi', age:7}\n      ]\n    })\n\n  }\n\n\n  render(){\n    const mystyle = {\n      backgroundColor: 'blue',\n      color:'white',\n      fontSize: '16px',\n      border: '1px solid blue',\n      padding: '16px',\n      cursor: 'pointer'\n    };\n\n    return (\n    \n      <div className=\"App\">\n\n        <h1>My React app</h1>\n\n        <button\n         style = {mystyle}\n        onClick={() => this.switchNameHandler('Max!!')}>Switch Name</button>\n     \n        <Person name={this.state.persons[0].name} age={this.state.persons[0].age}/>\n        <Person \n              name={this.state.persons[1].name}\n              age={this.state.persons[1].age}\n              click={this.switchNameHandler.bind(this,'Max')}\n              changed = {this.nameChangedHandler}> My Hobbies Racing:\n              </Person>\n        <Person name={this.state.persons[2].name} age={this.state.persons[2].age}/>\n       \n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}