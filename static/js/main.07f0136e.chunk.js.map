{"version":3,"sources":["logo.svg","Person/Person.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Radium","props","className","onClick","click","name","age","children","type","onChange","changed","value","App","state","persons","id","showPersons","nameChangedHandler","event","personIndex","findIndex","p","person","target","setState","deletePersonHandler","slice","splice","togglePersonsHandler","doesShow","mystyle","backgroundColor","color","fontSize","border","padding","cursor","this","map","index","key","classes","length","push","lenght","join","style","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iJAAAA,EAAOC,QAAU,IAA0B,kC,uNCe5BC,eAXA,SAACC,GAEZ,OACI,yBAAKC,UAAU,UACX,uBAAGC,QAASF,EAAMG,OAAlB,OAA8BH,EAAMI,KAApC,aAAoDJ,EAAMK,IAA1D,0BACA,2BAAIL,EAAMM,UACV,2BAAOC,KAAK,OAAOC,SAAUR,EAAMS,QAASC,MAAOV,EAAMI,WCF/DO,G,mNAEJC,MAAQ,CACNC,QAAS,CACP,CAACC,GAAI,IAAIV,KAAM,SAAUC,IAAK,IAC9B,CAACS,GAAI,IAAIV,KAAM,OAAQC,IAAK,IAC5B,CAACS,GAAI,IAAIV,KAAM,QAASC,IAAK,IAE/BU,aAAa,G,EAKfC,mBAAqB,SAACC,EAAMH,GAC1B,IAAMI,EAAc,EAAKN,MAAMC,QAAQM,WAAU,SAAAC,GAC/C,OAAOA,EAAEN,KAAMA,KAEXO,EAAM,eACP,EAAKT,MAAMC,QAAQK,IAGvBG,EAAOjB,KAAOa,EAAMK,OAAOZ,MAC3B,IAAMG,EAAO,YAAO,EAAKD,MAAMC,SAC/BA,EAAQK,GAAeG,EAExB,EAAKE,SAAS,CAACV,QAASA,K,EAG1BW,oBAAsB,SAACN,GACrB,IAAML,EAAU,EAAKD,MAAMC,QAAQY,QAEnCZ,EAAQa,OAAOR,EAAa,GAC5B,EAAKK,SAAS,CAACV,QAAQA,K,EAIzBc,qBAAuB,WACrB,IAAMC,EAAW,EAAKhB,MAAMG,YAC5B,EAAKQ,SAAS,CAAER,aAAca,K,uDAItB,IAAD,OACDC,EAAU,CACdC,gBAAiB,OACjBC,MAAO,QACPC,SAAU,OACVC,OAAQ,iBACRC,QAAS,OACTC,OAAQ,UACR,SAAU,CACRL,gBAAiB,aACjBC,MAAO,UAIPlB,EAAU,KACVuB,KAAKxB,MAAMG,cACbF,EACE,6BACCuB,KAAKxB,MAAMC,QAAQwB,KAAI,SAAChB,EAAOiB,GAC5B,OAAO,kBAAC,EAAD,CACPnC,MAAO,kBAAM,EAAKqB,oBAAoBc,IACpClC,KAAMiB,EAAOjB,KACbC,IAAKgB,EAAOhB,IACZkC,IAAOlB,EAAOP,GACdL,QAAS,SAACQ,GAAD,OAAW,EAAKD,mBAAmBC,EAAMI,EAAOP,WAOjEe,EAAQC,gBAAkB,QAC1BD,EAAQ,UAAW,CACfC,gBAAiB,SACjBC,MAAO,UAKb,IAAMS,EAAU,GAShB,OARGJ,KAAKxB,MAAMC,QAAQ4B,QAAS,GAC7BD,EAAQE,KAAK,QAEZN,KAAKxB,MAAMC,QAAQ8B,QAAS,GAC7BH,EAAQE,KAAK,QAKb,yBAAKzC,UAAU,OACb,wBAAIA,UAAWuC,EAAQI,KAAK,MAA5B,aAEA,4BAAQC,MAAOhB,EAAS3B,QAASkC,KAAKT,sBAAtC,kBAGCd,O,GAjGSiC,cAuGH/C,cAAOY,GCnGFoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.07f0136e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport Person from './Person.css';\r\nimport Radium from 'radium';\r\n\r\nconst person = (props) => {\r\n\r\n    return(\r\n        <div className=\"Person\">\r\n            <p onClick={props.click}>I'm {props.name} and I am {props.age} years old    [Delete]</p>\r\n            <p>{props.children}</p>\r\n            <input type=\"text\" onChange={props.changed} value={props.name}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Radium(person);","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Person from \"./Person/Person.js\";\nimport Radium from 'radium';\n\nimport { render } from \"@testing-library/react\";\n\nclass App extends Component {\n  //======== States and props ======\n  state = {\n    persons: [\n      {id: '1',name: \"Dragos\", age: 33 },\n      {id: '2',name: \"Radu\", age: 35 },\n      {id: '3',name: \"Ioana\", age: 7 },\n    ],\n    showPersons: false,\n  };\n\n  // ===== Methods =====\n  \n  nameChangedHandler = (event,id ) => {\n    const personIndex = this.state.persons.findIndex(p => {\n      return p.id ===id;\n    });\n    const person = {\n      ...this.state.persons[personIndex]\n    };\n    // const person = Object.assign({},this.state.persons[personIndex]);\n     person.name = event.target.value;\n     const persons = [...this.state.persons];\n     persons[personIndex] = person;\n\n    this.setState({persons: persons});\n  };\n\n  deletePersonHandler = (personIndex) => {\n    const persons = this.state.persons.slice();\n    // const persons = [...this.state.persons];\n    persons.splice(personIndex, 1);\n    this.setState({persons:persons});\n\n  }\n\n  togglePersonsHandler = () => {\n    const doesShow = this.state.showPersons;\n    this.setState({ showPersons: !doesShow });\n  };\n\n  // ===== Render =====\n  render() {\n    const mystyle = {\n      backgroundColor: \"blue\",\n      color: \"white\",\n      fontSize: \"16px\",\n      border: \"1px solid blue\",\n      padding: \"16px\",\n      cursor: \"pointer\",\n      ':hover': {\n        backgroundColor: 'lightgreen',\n        color: 'black'\n      }\n    };\n\n    let persons = null;\n    if (this.state.showPersons) {\n      persons = (\n        <div>\n        {this.state.persons.map((person,index) => {\n            return <Person \n            click={() => this.deletePersonHandler(index)}\n              name={person.name}\n              age={person.age}\n              key = {person.id}\n              changed={(event) => this.nameChangedHandler(event,person.id)}\n            />\n          }\n        )}\n         \n        </div>\n      );\n      mystyle.backgroundColor = 'green';\n      mystyle[':hover']= {\n          backgroundColor: 'salmon',\n          color: 'white'\n        \n      }\n    }\n\n    const classes = [];\n    if(this.state.persons.length <=2) {\n      classes.push('blue');\n    }\n    if(this.state.persons.lenght <=1) {\n      classes.push('bold');\n    }\n\n    // ====== Return ===== \n    return (\n      <div className=\"App\">\n        <h1 className={classes.join(' ')}>React app</h1>\n\n        <button style={mystyle} onClick={this.togglePersonsHandler}>\n          Toggle Persons\n        </button>\n        {persons}\n      </div>\n    );\n  }\n}\n\nexport default Radium(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}